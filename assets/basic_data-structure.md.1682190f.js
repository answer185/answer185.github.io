import{_ as a,c as i,o as e,d as l}from"./app.64149c3d.js";const b=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据结构","slug":"数据结构-1","link":"#数据结构-1","children":[{"level":3,"title":"什么是数据结构","slug":"什么是数据结构","link":"#什么是数据结构","children":[]}]},{"level":2,"title":"常见的数据结构","slug":"常见的数据结构","link":"#常见的数据结构","children":[{"level":3,"title":"基础类型","slug":"基础类型","link":"#基础类型","children":[]},{"level":3,"title":"线性结构","slug":"线性结构","link":"#线性结构","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":3,"title":"树形结构","slug":"树形结构","link":"#树形结构","children":[]},{"level":3,"title":"图形结构","slug":"图形结构","link":"#图形结构","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]}],"relativePath":"basic/data-structure.md"}'),r={name:"basic/data-structure.md"},h=l('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#数据结构-1">数据结构</a><ul><li><a href="#什么是数据结构">什么是数据结构</a></li></ul></li><li><a href="#常见的数据结构">常见的数据结构</a><ul><li><a href="#基础类型">基础类型</a></li><li><a href="#线性结构">线性结构</a></li><li><a href="#集合">集合</a></li><li><a href="#树形结构">树形结构</a></li><li><a href="#图形结构">图形结构</a></li><li><a href="#其他">其他</a></li></ul></li></ul></nav><h2 id="数据结构-1" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构-1" aria-hidden="true">#</a></h2><h3 id="什么是数据结构" tabindex="-1">什么是数据结构 <a class="header-anchor" href="#什么是数据结构" aria-hidden="true">#</a></h3><p>数据结构是计算机中存储和组织数据的方式</p><p>主要包含4方面的内容：</p><ol><li>数据元素（Data）</li><li>逻辑结构：数据元素之间的逻辑关系</li><li>存储结构：逻辑结构在计算机中的存储结构</li><li>所规定的操作：除常见的增删改查外，还有遍历和排序等。</li></ol><h4 id="数据元素" tabindex="-1">数据元素 <a class="header-anchor" href="#数据元素" aria-hidden="true">#</a></h4><ol><li>数据项（Data Item）: 是数据结构中讨论的最小单位，存在于某具数据元素的集合中。</li><li>数据元素（Data Element）: 数据集合中的一个个体，通常包含多个或一个数据项。如一个Person对象，可能name, address, mobile等数据项</li><li>数据对象：具有相同性质的元素集合，如一个由字符串组成的数组，一个由Person对象组成的数组。</li><li>数据（Data）：所有能够被计算机识别的符号集合。它是一个抽象的概念，可以是程序语言中定义的类型，也可以是自定义的结构体类型</li></ol><h4 id="逻辑结构" tabindex="-1">逻辑结构 <a class="header-anchor" href="#逻辑结构" aria-hidden="true">#</a></h4><p>对于关系型数据，通常有一对一、一对多以及多对多的关系。对于无序的数据，通常用集合来表示。</p><p>基于此，逻辑结构有：</p><ol><li>线性结构：通常用来表示一对一的关系，表现形式有：数组、列表、栈、队列及链表等。</li><li>树形结构：用于表示一对多的关系，表现形式就是对应的树。</li><li>图形结构：用于表示多对多的关系，由边和点组成</li><li>集合结构：用于表示无序的数据，表现形式有：字典和散列。</li></ol><h4 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-hidden="true">#</a></h4><p>存储结构有两种形式：</p><ol><li>顺序存储：数据存储在一片连续空间中，存取速度快，但是插入和删除慢</li><li>链式存储：数据存储在不连续的空间中，通过辅助结构来寻找。插入和删除效率高，但是存取速度慢。 存储结构与逻辑结构并没有特殊的限制，一个线性结构，即可以顺序存储，也可以链式存储。</li></ol><h4 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-hidden="true">#</a></h4><p>每个数据定义好后，都会有相应的基本操作。对于程序语言来说，各数据类型都有提供相应的基础API操作</p><h2 id="常见的数据结构" tabindex="-1">常见的数据结构 <a class="header-anchor" href="#常见的数据结构" aria-hidden="true">#</a></h2><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-hidden="true">#</a></h3><p>这里的基础类型指的是编程语言常见的内置类型，以javascript为例，有：</p><ol><li>undefined： 只有一个值，在变量声明但是未赋值时产生</li><li>null： 只有一个值，表示一个空对象指针</li><li>boolean： 常见的布尔值，拥有两个字面量值：true和false</li><li>number：使用IEEE754格式来表示的整数和浮点数</li><li>string：表示由Unicode组成的字符序列</li><li>object：一组数据和功能对象的集合</li><li>array：基于Object实现的有序列表</li><li>Date：时间对象</li><li>RegExp：正则表达式对象</li><li>Function：函数对象</li><li>symbol：生成一个独一无二的值</li><li>set：不重复值的集合</li><li>weakSet：不重复值的集合，且成员必须是对象</li><li>map：类似Object，对象的Key可以是做任意类型</li><li>WeakMap：只接受Object作为key的对象类型</li></ol><h3 id="线性结构" tabindex="-1">线性结构 <a class="header-anchor" href="#线性结构" aria-hidden="true">#</a></h3><h4 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-hidden="true">#</a></h4><p>列表指的是不需要很长的序列。如待办事项、购物清单及Top榜单等。 可以基于数组实现。</p><h4 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-hidden="true">#</a></h4><p>栈可以理解成一种特殊的列表，只有在列表的一头操作。 数据是先进后出。 可以使用数组实现。</p><h4 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-hidden="true">#</a></h4><p>队列也是一种特殊的列表，插入只能在队尾操作，删除只有在队首操作。即先进先出。</p><p>还有一种特殊的队列叫优先队列，不同的地方在于，插入时，会为每个数据设置优先级，删除时根据优先级来删除，而不是队首。</p><p>可以使用数组实现。</p><h4 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-hidden="true">#</a></h4><p><strong>数组的缺点</strong></p><p>上述的列表、栈及队列基本上是基于数组实现。通常情况下，数组的长度是固定的，添加和删除数据时，需要将数组中的相关元素做向前或向后平移。 在插入和删除比较频繁的线性结构数据中，链表是更适用的结构</p><p><strong>链表定义</strong></p><p>链表是一组节点的集合，每个节点都指向它的下一个节点。</p><h4 id="位图" tabindex="-1">位图 <a class="header-anchor" href="#位图" aria-hidden="true">#</a></h4><p>位图是一个数组，每个成员的值只有0和1，用于存放某个海量数据的某种状态。通常用于判断某个数据是否存在。 0表示不存在，1表示存在。</p><h3 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-hidden="true">#</a></h3><h4 id="字典" tabindex="-1">字典 <a class="header-anchor" href="#字典" aria-hidden="true">#</a></h4><p>字典是以键值形式存储数据的数据结构。 javascript的Object就是以字典的形式设计。</p><h4 id="散列-哈希" tabindex="-1">散列(哈希) <a class="header-anchor" href="#散列-哈希" aria-hidden="true">#</a></h4><p>哈希表通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数，存放记录的数组称做哈希表。</p><p>通常情况下，数据会存储在一个有限长度的数组中，哈希函数会将Key映射为一个数字，这个数字的范围是0到散列表的长度。这样会引出一个新的问题，两个key可能映射为同一个位置。这种情况称为碰撞。</p><p>解决方式有两种：</p><ol><li>开链法：每个数组元素，使用新的结构来存储冲突的数据（数组大小是待存储数据的1.5倍左右时使用）</li><li>线性探测法：当碰撞发生时，检查下一个位置是否为空，走到找到空位（数组大小是待存储数据2倍及以上使用）</li></ol><h4 id="布隆过滤器" tabindex="-1">布隆过滤器 <a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a></h4><p>布隆过滤器是基于位图和哈希函数来实现。可以快速地告诉你：某个值一定不存在，以及某个值可能存在。</p><h3 id="树形结构" tabindex="-1">树形结构 <a class="header-anchor" href="#树形结构" aria-hidden="true">#</a></h3><h4 id="基本定义" tabindex="-1">基本定义 <a class="header-anchor" href="#基本定义" aria-hidden="true">#</a></h4><ol><li>树的度数：该节点孩子的最大个数。</li><li>二叉树：最多有两个子节点的树</li><li>N叉树：最多有N个子节点的树</li><li>平衡树：任意节点的子树的高度差都小于等于1</li><li>满二叉树：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。</li><li>完全二叉树：一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。</li></ol><h4 id="二叉查找树" tabindex="-1">二叉查找树 <a class="header-anchor" href="#二叉查找树" aria-hidden="true">#</a></h4><p>也称二叉搜索树，左节点的值比父节点小，右节点的值比父节点大的二叉树。</p><h4 id="avl-树" tabindex="-1">AVL 树 <a class="header-anchor" href="#avl-树" aria-hidden="true">#</a></h4><p>也称平衡二叉树，它的特点是：</p><ol><li>是一棵二叉搜索树。</li><li>每个结点的左右子树的高度之差的绝对值（平衡因子）最多为1。</li></ol><h4 id="红黑树" tabindex="-1">红黑树 <a class="header-anchor" href="#红黑树" aria-hidden="true">#</a></h4><p>使用红色和黑色来表示节点，并可以满足以下特点的树：</p><ol><li>根结点是黑色。</li><li>所有叶子都是黑色。</li><li>每个红色结点的两个子结点都是黑色。或从每个叶子到根的所有路径上不能有两个连续的红色结点</li><li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li></ol><p>与AVL树的的区别：</p><ol><li>因为不需要保持严格的平衡，所以插入和删除的效率会更高。</li></ol><h4 id="线段树" tabindex="-1">线段树 <a class="header-anchor" href="#线段树" aria-hidden="true">#</a></h4><p>使用二叉树来存储区间或线段，并且允许快速查询结构内包含某一点的所有区间。</p><h4 id="树状数组" tabindex="-1">树状数组 <a class="header-anchor" href="#树状数组" aria-hidden="true">#</a></h4><p>使用树来表示数组，树节点与数组的值的关系如下：</p><blockquote><p>C[i] = A[i - 2k+1] + A[i - 2k+2] + ... + A[i];</p></blockquote><p>k为i的二进制中从最低位到高位连续零的长度</p><h4 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-hidden="true">#</a></h4><ol><li>堆中某个结点的值总是不大于或不小于其父结点的值；</li><li>堆总是一棵完全二叉树。</li><li>将根结点最大的堆叫做最大堆或大根堆，根结点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</li></ol><h4 id="b树" tabindex="-1">B树 <a class="header-anchor" href="#b树" aria-hidden="true">#</a></h4><p>一棵m阶B树(balanced tree of order m)是一棵平衡的m路搜索树。它或者是空树，或者是满足下列性质的树：</p><ol><li>根结点至少有两个子女；</li><li>每个非根节点所包含的关键字个数 j 满足：┌m/2┐ - 1 &lt;= j &lt;= m - 1；（ceil(m/2) -1 &lt;= j &lt;= m-1）</li><li>除根结点以外的所有结点（不包括叶子结点）的度数正好是关键字总数加1，故内部子树个数 k 满足：┌m/2┐ &lt;= k &lt;= m ；(ceil(m/2) &lt;= k &lt;= m)</li><li>所有的叶子结点都位于同一层。</li><li>排序方式：全部节点关键字是按递增次序排列，并遵循左小右大原则；</li></ol><h4 id="b-树" tabindex="-1">B+树 <a class="header-anchor" href="#b-树" aria-hidden="true">#</a></h4><p>B+树是B树的一种变形形式，B+树上的叶子结点存储关键字以及相应记录的地址，叶子结点以上各层作为索引使用。定义如下：</p><ol><li>每个节点最多有m个子节点</li><li>除根节点外，每个节点至少有m/2个子节点，注意如果结果除不尽，就向上取整，比如5/2=3。</li><li>根节点要么是空，要么是独根，否则至少有2个子节点</li><li>有k个子节点的节点必有k个关键码</li><li>叶节点的高度一致</li></ol><p>一棵m阶的B+树和m阶的B树的差异在于:</p><ol><li>有n棵子树的结点中含有n个关键码，B树是：ceil(m/2)&lt;=j&lt;=m-1；</li><li>所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且叶子结点本身依关键码的大小自小而大的顺序链接；</li><li>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大(或最小)关键码。</li></ol><h4 id="字典树" tabindex="-1">字典树 <a class="header-anchor" href="#字典树" aria-hidden="true">#</a></h4><h4 id="并查集" tabindex="-1">并查集 <a class="header-anchor" href="#并查集" aria-hidden="true">#</a></h4><h3 id="图形结构" tabindex="-1">图形结构 <a class="header-anchor" href="#图形结构" aria-hidden="true">#</a></h3><h4 id="基本定义-1" tabindex="-1">基本定义 <a class="header-anchor" href="#基本定义-1" aria-hidden="true">#</a></h4><h4 id="有向图" tabindex="-1">有向图 <a class="header-anchor" href="#有向图" aria-hidden="true">#</a></h4><h4 id="无向图" tabindex="-1">无向图 <a class="header-anchor" href="#无向图" aria-hidden="true">#</a></h4><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h3><h4 id="抽象数据类型" tabindex="-1">抽象数据类型 <a class="header-anchor" href="#抽象数据类型" aria-hidden="true">#</a></h4><p>抽象数据类型指的是当前数据结构的抽象定义，包括该类型的属性及可以做的操作。 同时也指明属性值的类型及操作函数的参数及返回值类型。 JS中可以使用typescript来表示。</p>',86),d=[h];function n(t,s,c,o,p,u){return e(),i("div",null,d)}const x=a(r,[["render",n]]);export{b as __pageData,x as default};
