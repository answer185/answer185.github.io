import{_ as l,c as s,o as e,d as a}from"./app.64149c3d.js";const F=JSON.parse('{"title":"Element-plus的构建原理","description":"","frontmatter":{},"headers":[{"level":2,"title":"输入和输出","slug":"输入和输出","link":"#输入和输出","children":[{"level":3,"title":"输入","slug":"输入","link":"#输入","children":[]},{"level":3,"title":"输出","slug":"输出","link":"#输出","children":[]}]},{"level":2,"title":"构建流程","slug":"构建流程","link":"#构建流程","children":[{"level":3,"title":"流程框架","slug":"流程框架","link":"#流程框架","children":[]},{"level":3,"title":"清理的原理","slug":"清理的原理","link":"#清理的原理","children":[]},{"level":3,"title":"runTask原理","slug":"runtask原理","link":"#runtask原理","children":[]},{"level":3,"title":"buildModules的原理","slug":"buildmodules的原理","link":"#buildmodules的原理","children":[]},{"level":3,"title":"buildFullBundle的原理","slug":"buildfullbundle的原理","link":"#buildfullbundle的原理","children":[]},{"level":3,"title":"generateTypesDefinitions的原理","slug":"generatetypesdefinitions的原理","link":"#generatetypesdefinitions的原理","children":[]},{"level":3,"title":"buildHelper的原理","slug":"buildhelper的原理","link":"#buildhelper的原理","children":[]},{"level":3,"title":"buildThemeChalk原理","slug":"buildthemechalk原理","link":"#buildthemechalk原理","children":[]},{"level":3,"title":"copyTypesDefinitions原理","slug":"copytypesdefinitions原理","link":"#copytypesdefinitions原理","children":[]},{"level":3,"title":"copyFiles的原理","slug":"copyfiles的原理","link":"#copyfiles的原理","children":[]}]},{"level":2,"title":"多进程方案","slug":"多进程方案","link":"#多进程方案","children":[]}],"relativePath":"frontend/element-plus-build.md"}'),n={name:"frontend/element-plus-build.md"},t=a(`<h1 id="element-plus的构建原理" tabindex="-1">Element-plus的构建原理 <a class="header-anchor" href="#element-plus的构建原理" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#输入和输出">输入和输出</a><ul><li><a href="#输入">输入</a></li><li><a href="#输出">输出</a></li></ul></li><li><a href="#构建流程">构建流程</a><ul><li><a href="#流程框架">流程框架</a></li><li><a href="#清理的原理">清理的原理</a></li><li><a href="#runtask原理">runTask原理</a></li><li><a href="#buildmodules的原理">buildModules的原理</a></li><li><a href="#buildfullbundle的原理">buildFullBundle的原理</a></li><li><a href="#generatetypesdefinitions的原理">generateTypesDefinitions的原理</a></li><li><a href="#buildhelper的原理">buildHelper的原理</a></li><li><a href="#buildthemechalk原理">buildThemeChalk原理</a></li><li><a href="#copytypesdefinitions原理">copyTypesDefinitions原理</a></li><li><a href="#copyfiles的原理">copyFiles的原理</a></li></ul></li><li><a href="#多进程方案">多进程方案</a></li></ul></nav><h2 id="输入和输出" tabindex="-1">输入和输出 <a class="header-anchor" href="#输入和输出" aria-hidden="true">#</a></h2><h3 id="输入" tabindex="-1">输入 <a class="header-anchor" href="#输入" aria-hidden="true">#</a></h3><p>packages/下的各个包：</p><ul><li>都包含有入口文件。</li><li>必要的处理命令，方便外部调用。</li><li>组件的Js与css分离。</li></ul><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">文件</th><th style="text-align:left;">类型说明</th><th style="text-align:left;">输出说明</th></tr></thead><tbody><tr><td style="text-align:left;">unpkg(浏览器直接引入)</td><td style="text-align:left;">dist/index.full.js</td><td style="text-align:left;">可以通过CDN链接的方式加载,引入后，可以在html中直接使用el-button类的标签</td><td style="text-align:left;">输出一个立即执行函数</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dist/index.full.min.js</td><td style="text-align:left;">带代码压缩</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dist/index.full.mjs</td><td style="text-align:left;">es6模块</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dist/index.full.min.mjs</td><td style="text-align:left;">带压缩的es6模块</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dist/index.css</td><td style="text-align:left;">合并及压缩后的所有css</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">*.map</td><td style="text-align:left;">相关的sourcemap文件</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">lib</td><td style="text-align:left;">lib/index.js</td><td style="text-align:left;">CommandJS类型的模块，使用require及module.exports来管理模块</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">module</td><td style="text-align:left;">es/index.mjs</td><td style="text-align:left;">ES6的模块，使用import及export来管理模块</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">theme-chalk</td><td style="text-align:left;">src/*</td><td style="text-align:left;">scss的源码</td><td style="text-align:left;">可以在项目中引入scss，与项目一起编译</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">el-*.css</td><td style="text-align:left;">每个组件的css</td><td style="text-align:left;">转译并压缩好的css文件</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">index.css</td><td style="text-align:left;">所有css的合并</td><td style="text-align:left;">同dist/index.css</td></tr><tr><td style="text-align:left;">package.json等文件</td><td style="text-align:left;">package.json<br> README.md<br>global.d.ts</td><td style="text-align:left;">包的说明文件</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">types</td><td style="text-align:left;">types/**/*.d.ts</td><td style="text-align:left;">组件及.ts文件的typescript类型</td><td style="text-align:left;">在最后一步时，会拷贝到lib及es中，所以发版的时候，不需要再带上</td></tr></tbody></table><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-hidden="true">#</a></h2><h3 id="流程框架" tabindex="-1">流程框架 <a class="header-anchor" href="#流程框架" aria-hidden="true">#</a></h3><ul><li>pnpm run build: 触发构建命令</li><li>pnpm run start -C internal/build: 执行internal/build下的start命令</li><li>gulp --require sucrase/register/ts -f gulpfile.ts: 加载ts解析模块，触发gulpfile的默认导出函数的执行</li><li>使用series api来序列化相关操作 <ul><li>清理：执行npm run clean 清除上次的操作。 <ul><li>pnpm run clean:dist &amp;&amp; pnpm run clean --filter ./packages/ --stream <ul><li>rimraf dist</li></ul></li></ul></li><li>createOutput: 初始化输出目录</li><li>并行执行不同类型的构建操作 <ul><li>buildModules： 模块构建，输出lib和es</li><li>buildFullBundle: 构建unpkg包</li><li>generateTypesDefinitions： 生成type</li><li>buildHelper: 生成 IDE 支持，web-types.json，支持webstorm, vetur： attributes.json及tags.json</li></ul></li><li>buildThemeChalk： 打包css，并复制到theme-chalk目录</li><li>copyTypesDefinitions：复制类型定义到types</li></ul></li></ul><h3 id="清理的原理" tabindex="-1">清理的原理 <a class="header-anchor" href="#清理的原理" aria-hidden="true">#</a></h3><p>pnpm run clean --filter ./packages/ --stream</p><p>filter表示指定packages目录下的所有子包。--stream表示从packages再输出一个流，读取不同的文件流，并行操作 效果是执行所有子包的clean命令。</p><p>目前只有 theme-chalk包有clean操作</p><h3 id="runtask原理" tabindex="-1">runTask原理 <a class="header-anchor" href="#runtask原理" aria-hidden="true">#</a></h3><p>作用是把相应的任务名称与gulp的配置文件关联，执行相应的gulp函数，如：</p><ul><li>runTask(&#39;buildModules&#39;),</li><li>使用withTaskName 设置相应的任务名称: 实际原理是为函数添加displayName的属性</li><li>新开一个进行，执行：pnpm run start buildModules命令</li><li>对应的原始命令是：gulp --require sucrase/register/ts -f gulpfile.ts buildModules</li><li>buildModules为gulpfile导出的一个函数，对应src/tasks/modules.ts</li><li>执行该buildModules函数</li></ul><h3 id="buildmodules的原理" tabindex="-1">buildModules的原理 <a class="header-anchor" href="#buildmodules的原理" aria-hidden="true">#</a></h3><h4 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-hidden="true">#</a></h4><ol><li>读取出 packages 目录下的所有文件路径，并过滤掉node_modules、test、mock、gulpfile、dist等目录</li><li>将input传入rollup，没有配置output，返回bundle</li><li>根据bundle配置，写入文件</li></ol><h4 id="文件路径" tabindex="-1">文件路径 <a class="header-anchor" href="#文件路径" aria-hidden="true">#</a></h4><ol><li>使用fast-glob遍历，只读取文件，过滤掉目录。</li><li>返回的路径是绝对路径。且只读取一级目录下的文件，如：某个组件，只读取index.ts</li><li>过滤掉路径中有不支持的文件名称</li><li>像constants这样没有src，文件都在外层，会重复处理。</li><li>没有theme-chalk下的css相关文件。</li></ol><h4 id="rollup的应用" tabindex="-1">rollup的应用 <a class="header-anchor" href="#rollup的应用" aria-hidden="true">#</a></h4><ul><li>input：只针对js</li><li>plugins： <ul><li>Element-plus-alias-plugin: 自定义的plugin，将组件里的 element-plus/theme-chalk/el-*** 转化为element-plus/theme-chalk/el-***。和包的导出方式保持一致</li><li>DefineOptions: 解析单文件组件里的defineOptions函数</li><li>vue及vuejsx: 解析vue的单文件组件，支持jsx语法</li><li>nodeResolve：打包第三方依赖</li><li>Commonjs: 支持commonjs模块</li><li>esbuild: 将ts及新的es语法，转化成相应的代码，并压缩。当前是转为到es2018</li></ul></li><li>external: <ul><li>封装成函数，从pkg中读取同级的依赖过滤。</li><li>根据element-plus/package.json下的peerdependencies来过滤掉不需要的依赖</li></ul></li><li>treeshake：过滤掉不需要的代码，现在是关闭的。</li></ul><h4 id="输出文件" tabindex="-1">输出文件 <a class="header-anchor" href="#输出文件" aria-hidden="true">#</a></h4><p>使用rollup返回的bundle对象的write API 及两种类型的配置输出内容到文件中。有两种格式：esm和cjs:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/Users/dc/httpdocs/homeking/fe-element-plus/dist/element-plus/es</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preserveModules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preserveModulesRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/Users/dc/httpdocs/homeking/fe-element-plus/packages/element-plus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entryFileNames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[name].mjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/Users/dc/httpdocs/homeking/fe-element-plus/dist/element-plus/lib</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">named</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preserveModules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preserveModulesRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/Users/dc/httpdocs/homeking/fe-element-plus/packages/element-plus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entryFileNames</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[name].js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>输出函数: 输出操作是异步的，如果不设置Promise.all，并等待执行完，整个进程会提前结束</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeBundles</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">bundle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RollupBuild</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OutputOptions</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">option</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">option</span><span style="color:#F07178;">)))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="buildfullbundle的原理" tabindex="-1">buildFullBundle的原理 <a class="header-anchor" href="#buildfullbundle的原理" aria-hidden="true">#</a></h3><h4 id="执行过程-1" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程-1" aria-hidden="true">#</a></h4><ol><li>创建 buildFullMinified 及 buildFull的任务，都调用buildFull，传入不同的minify设置</li><li>触发buildFullEntry及buildFullLocaler的执行，localer生成多语言包，已经删除</li><li>buildFullEntry</li><li>根据 element-plus/index.ts的入口文件寻找依赖打包</li><li>输出umd及esm的两种full包，输出配置如下：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">umd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        epOutput</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">formatBundleFilename</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.full</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> minify</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">named</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">HomekingUI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">globals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">vue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> minify</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        epOutput</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">formatBundleFilename</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.full</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> minify</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">sourcemap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> minify</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"></span></code></pre></div><h4 id="esbuild的配置差异" tabindex="-1">esbuild的配置差异 <a class="header-anchor" href="#esbuild的配置差异" aria-hidden="true">#</a></h4><ul><li>minify： 是否压缩代码的控制 ，buildModules不压缩，buildFullBundle在生成.min时压缩</li><li>sourceMap的控制：buildModules默认是true,buildFullBundle在没有压缩时，不生成</li><li><code>production</code>的设置：buildModules没有，buildFullBundle才有</li></ul><h4 id="输出文件-1" tabindex="-1">输出文件 <a class="header-anchor" href="#输出文件-1" aria-hidden="true">#</a></h4><p>index.full系列的5个文件 Sourcemap: 只在压缩的情况下才生成</p><h3 id="generatetypesdefinitions的原理" tabindex="-1">generateTypesDefinitions的原理 <a class="header-anchor" href="#generatetypesdefinitions的原理" aria-hidden="true">#</a></h3><ul><li>遍历packages下.js， .ts及vue文件</li><li>借助 ts-morph，生成所有的.ts文件类型（除主库外的文件）</li><li>输入文件到dist/types下</li></ul><h3 id="buildhelper的原理" tabindex="-1">buildHelper的原理 <a class="header-anchor" href="#buildhelper的原理" aria-hidden="true">#</a></h3><ul><li>根据 components-helper 生成 对webstorm及vscode的插件配置支持</li><li>有attributes.json、tags.json及web-types.json</li></ul><h3 id="buildthemechalk原理" tabindex="-1">buildThemeChalk原理 <a class="header-anchor" href="#buildthemechalk原理" aria-hidden="true">#</a></h3><ul><li>执行packages包下的所有build命令：pnpm run --filter ./packages/ build --parallel</li><li>触发theme-chalk下的build命令执行</li><li>触发 buildThemeChalk <ul><li>使用gulp的src及dest api复制theme-chalk下的src到dist/theme-chalk/src下</li><li>使用src读取所有的scss文件</li><li>使用gulp-sass 处理scss</li><li>使用gulp-autoprefixer添加完善css</li><li>使用gulp-clean-css压缩css,并显示大小变化信息</li><li>使用gulp-rename重命名文件，添加el-前缀</li><li>输出到theme-chalk的dist下</li></ul></li><li>触发 copyThemeChalkBundle， 复制them-chalk下的dist目录下的内容到外围的dist/element-plus/theme-chalk目录下</li><li>复制index.css到dist/element-plus/dist下，与index.full***组成完整的库</li></ul><h3 id="copytypesdefinitions原理" tabindex="-1">copyTypesDefinitions原理 <a class="header-anchor" href="#copytypesdefinitions原理" aria-hidden="true">#</a></h3><ul><li>复制types下的.d.ts到es及lib中</li><li>使用fs-extra的copy API</li></ul><h3 id="copyfiles的原理" tabindex="-1">copyFiles的原理 <a class="header-anchor" href="#copyfiles的原理" aria-hidden="true">#</a></h3><ul><li>复制element-plus下的package.json</li><li>复制项目的README.md及global.d.ts</li></ul><h2 id="多进程方案" tabindex="-1">多进程方案 <a class="header-anchor" href="#多进程方案" aria-hidden="true">#</a></h2><p>最多时会分7个进程</p><ul><li>buildModules</li><li>buildFullBundle <ul><li>压缩版本</li><li>非压缩版本</li></ul></li><li>generateTypesDefinitions</li><li>buildHelper</li><li>buildThemeChalk</li></ul><p>最后的文件复制也是分两个进程处理：</p><ul><li>复制type，依赖于buildModules及generateTypesDefinitions任务的完成</li><li>复制说明包的说明文件</li></ul>`,53),p=[t];function o(i,r,c,d,y,D){return e(),s("div",null,p)}const h=l(n,[["render",o]]);export{F as __pageData,h as default};
