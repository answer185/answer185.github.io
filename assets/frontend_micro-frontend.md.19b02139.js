import{_ as s,c as a,o as l,d as n}from"./app.64149c3d.js";const C=JSON.parse('{"title":"微前端","description":"","frontmatter":{},"headers":[{"level":2,"title":"架构理论","slug":"架构理论","link":"#架构理论","children":[{"level":3,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":3,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":3,"title":"拆分方式","slug":"拆分方式","link":"#拆分方式","children":[]},{"level":3,"title":"架构设计点","slug":"架构设计点","link":"#架构设计点","children":[]},{"level":3,"title":"不足","slug":"不足","link":"#不足","children":[]}]},{"level":2,"title":"行业方案","slug":"行业方案","link":"#行业方案","children":[{"level":3,"title":"iframe","slug":"iframe","link":"#iframe","children":[]},{"level":3,"title":"qiankun","slug":"qiankun","link":"#qiankun","children":[]}]},{"level":2,"title":"后台微前端实践","slug":"后台微前端实践","link":"#后台微前端实践","children":[{"level":3,"title":"总体设计","slug":"总体设计","link":"#总体设计","children":[]},{"level":3,"title":"开发","slug":"开发","link":"#开发","children":[]},{"level":3,"title":"疑难问题及解决","slug":"疑难问题及解决","link":"#疑难问题及解决","children":[]}]}],"relativePath":"frontend/micro-frontend.md"}'),p={name:"frontend/micro-frontend.md"},e=n(`<h1 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#架构理论">架构理论</a><ul><li><a href="#背景">背景</a></li><li><a href="#实现思路">实现思路</a></li><li><a href="#拆分方式">拆分方式</a></li><li><a href="#架构设计点">架构设计点</a></li><li><a href="#不足">不足</a></li></ul></li><li><a href="#行业方案">行业方案</a><ul><li><a href="#iframe">iframe</a></li><li><a href="#qiankun">qiankun</a></li></ul></li><li><a href="#后台微前端实践">后台微前端实践</a><ul><li><a href="#总体设计">总体设计</a></li><li><a href="#开发">开发</a></li><li><a href="#疑难问题及解决">疑难问题及解决</a></li></ul></li></ul></nav><h2 id="架构理论" tabindex="-1">架构理论 <a class="header-anchor" href="#架构理论" aria-hidden="true">#</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h3><p>企业考虑使用微前端架构的原因主要有3个：</p><ol><li>遗留系统的隔离：相引入新的技术栈，但是又不想动老系统。</li><li>聚合前端开发：将分散的各个应用聚合，方便使用及管理。</li><li>巨石应用的拆分：单页应用不拆分，会越来越庞大，最后变成一个很难维护的应用。启动慢，热更新慢及打包慢。开发体验很差。</li></ol><p>微前端架构应运而生，需要达到：</p><ol><li>技术栈无关</li><li>应用自治：独立运行时及独立开发和部署</li><li>单一职责：每个应用会有自己负责区域</li></ol><h3 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-hidden="true">#</a></h3><ul><li>路由分发式：通过反向代理，将请求路由到对应的应用上。</li><li>前端的微服务化：在不同的框架之上设计通信和加载机制。以使一个页面内加载对应的应用。</li><li>微应用：通过软件工程的试，在部署构建环境中，把多个独立的应用组合成一个单体应用。</li><li>微件化：开发新的构建系统，把应用打包成独立的chunk代码，然后远程加载。</li><li>前端容器化：使用iframe来加载</li><li>应用组件化：使用Web Components技术来构建</li></ul><p>微应用、微件及应用组件库与现在的工程体系相差太多，基本上不会使用。主要是路由分发式和前端的微服务化。</p><h3 id="拆分方式" tabindex="-1">拆分方式 <a class="header-anchor" href="#拆分方式" aria-hidden="true">#</a></h3><p>没有标准的方式，只有一定的考虑角度。</p><ul><li>按照业务拆分</li><li>权限</li><li>更新频率</li><li>组织机构</li><li>和后端的微服务保持一致</li></ul><p>主要的目标是尽量减少耦合，更接近业务。</p><h3 id="架构设计点" tabindex="-1">架构设计点 <a class="header-anchor" href="#架构设计点" aria-hidden="true">#</a></h3><ul><li>架构模式：基座模式和自组织模式。后者基本不会去考虑。</li><li>组件与模式库： 抽离出公共的部分</li><li>应用注册：规划应用的名称、端口、地址等信息，并注册到基座应用中</li><li>专用构建系统：需要调整输出的格式</li><li>共享数据结构及操作：比如：主框架应该共享哪些数据，以何种情况存储，数据结构应该是什么样</li><li>应用通信机制：主流框架主要考虑的是应用之间，但是实际后台系统需要的是页面层级的通信</li></ul><h3 id="不足" tabindex="-1">不足 <a class="header-anchor" href="#不足" aria-hidden="true">#</a></h3><ul><li>项目切换</li></ul><h2 id="行业方案" tabindex="-1">行业方案 <a class="header-anchor" href="#行业方案" aria-hidden="true">#</a></h2><h3 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-hidden="true">#</a></h3><h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-hidden="true">#</a></h4><ol><li>在主应用中管理所有的iframe窗口。每个链接对应一个内部标签页，不重复打开。</li><li>每个标签对应一个iframe， 并生成一个唯一的id。</li><li>通过postMessage及监听message事件，实现主应用对子应用、子应用对主应用及子应用对子应用的通信。</li></ol><h4 id="相关api" tabindex="-1">相关API <a class="header-anchor" href="#相关api" aria-hidden="true">#</a></h4><ol><li>window.parent: 返回当前窗口的父窗口对象。如果一个窗口没有父窗口,则它的 parent 属性为自身的引用.</li><li>window.postMessage: 分发一个 MessageEvent 消息。第一个参数为消息数据，第二个参数指定哪些窗口可以接收，*表示不限。可以安全地实现跨源通信。</li><li>window.addEventListner(&#39;messsage&#39;, handleMessage, false): 监听广播的message，并做处理</li></ol><h4 id="问题及解决" tabindex="-1">问题及解决 <a class="header-anchor" href="#问题及解决" aria-hidden="true">#</a></h4><ol><li>跨域问题：不要通过frameId直接获取相应window的对象，并访问相应的内部变量，如下代码会出现跨域：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">frames[</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">iframe_</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">parentId</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(actionName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data)</span></span>
<span class="line"></span></code></pre></div><p>解决： 通过postMessage来发送消息，并监听消息来处理：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">iframe_</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">parentId</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">contentWindow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">params</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>message事件监听的时机： 对vue来说，在created和onMounted都可以，建议在onMounted。</li><li>message的解析规则：可以确定了一些固定的参数，如API名称，来确定应该如何处理消息。</li><li>打开及关闭标签页面的逻辑处理：修改router.push及router.back, 判断运行环境，并做拦截处理</li><li>页面之间的数据通信。</li></ol><p>这里假设场景： A页面是一个表单，某个表单项的修改，需要新开一个页面B，保存成功后，需要把数据同步到A页面，数据随A页面一起提交。 以下是一个参考的实现方式：</p><ul><li>在A页面点开B页面时，需要把iframe标识带过去</li><li>在B页面保存时，先把表单的数据保存在本地，如localStorage中。</li><li>发布一个postMessage，更新相应的信息处理标记</li><li>间隔500毫秒左右再执行关闭标签页面的操作，否则localstorage里的数据可能没有成功</li><li>在A页面中监听信息标记的变化，如果为true时，从按约定从本地获取数据（在多标签页面的后台系统中，已打开的标签页面，不会因为切换了页面而卸载）</li><li>处理好数据后，清空本地数据并更新标记。</li></ul><p>整个代码结构如下:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// A表单页面打开B页面</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/path/to/B</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">frameId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">frameId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...}}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// B页面保存时的，通知主应用</span></span>
<span class="line"><span style="color:#A6ACCD;">localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">localtDataName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(rawData))</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    api</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">handleFunc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    arguments</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      frameId</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      action</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主应用，根据frameId，发送更新消息，并转发相关参数</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">iframe</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">frameId</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">contentWindow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">api</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">messageHandleFunc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">arguments</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> args</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// A页面的监听事件接收</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当前页面的事件监听条件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">condition</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 更新标记</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">actionName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> status</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// store中更新相应的标记</span></span>
<span class="line"><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> payload</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// A页面相关组件绑定及watch</span></span>
<span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">tagStatus</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 处理业务逻辑</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">handleLogic</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 修改标记状态为false</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">handleStatus</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上的流程中，数据可以不在本地保存，直接通过postMessage带</p><p>上面的交互是一个复杂的场景，只是作为例子，实际开发中建议通过修改交互，如弹窗来处理。</p><ol start="6"><li><p>后台标签页面的管理</p></li><li><p>页面权限的处理</p></li></ol><h4 id="iframe的不足" tabindex="-1">iframe的不足 <a class="header-anchor" href="#iframe的不足" aria-hidden="true">#</a></h4><p>为什么不用 iframe，这几乎是所有微前端方案第一个会被挑战的问题。但是大部分微前端方案又不约而同放弃了 iframe 方案，自然是有原因的，并不是为了 &quot;炫技&quot; 或者刻意追求 &quot;特立独行&quot;。</p><p>如果不考虑体验问题，iframe 几乎是最完美的微前端解决方案了。</p><p>iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但他的最大问题也在于他的隔离性无法被突破，导致应用间上下文无法被共享，随之带来的开发体验、产品体验的问题。</p><ol><li>url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</li><li>UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。（实际上就是产生了很多页面）</li><li>慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</li><li>网页截屏，iframe 就不被支持</li><li>其他： 不容易打印、无法被一些搜索引擎解析、增加http请求及不符合标准网页设计的理念，已经被标准网页设计抛弃。</li></ol><p>其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。</p><h3 id="qiankun" tabindex="-1">qiankun <a class="header-anchor" href="#qiankun" aria-hidden="true">#</a></h3><h2 id="后台微前端实践" tabindex="-1">后台微前端实践 <a class="header-anchor" href="#后台微前端实践" aria-hidden="true">#</a></h2><h3 id="总体设计" tabindex="-1">总体设计 <a class="header-anchor" href="#总体设计" aria-hidden="true">#</a></h3><h3 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-hidden="true">#</a></h3><h3 id="疑难问题及解决" tabindex="-1">疑难问题及解决 <a class="header-anchor" href="#疑难问题及解决" aria-hidden="true">#</a></h3>`,49),o=[e];function t(r,c,i,F,D,y){return l(),a("div",null,o)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
