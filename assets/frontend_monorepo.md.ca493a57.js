import{_ as s,c as a,o as n,d as l}from"./app.64149c3d.js";const e="/images/frontend/monorepo.png",A=JSON.parse('{"title":"Monorepo","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是Monorepo","slug":"什么是monorepo","link":"#什么是monorepo","children":[]},{"level":2,"title":"MultiRepo的不足","slug":"multirepo的不足","link":"#multirepo的不足","children":[{"level":3,"title":"代码复用","slug":"代码复用","link":"#代码复用","children":[]},{"level":3,"title":"依赖的版本管理","slug":"依赖的版本管理","link":"#依赖的版本管理","children":[]},{"level":3,"title":"项目基建","slug":"项目基建","link":"#项目基建","children":[]}]},{"level":2,"title":"Monorepo的优势","slug":"monorepo的优势","link":"#monorepo的优势","children":[]},{"level":2,"title":"Monorepo的落地设计","slug":"monorepo的落地设计","link":"#monorepo的落地设计","children":[]},{"level":2,"title":"Monorepo开源解决方案","slug":"monorepo开源解决方案","link":"#monorepo开源解决方案","children":[{"level":3,"title":"较底层的方案","slug":"较底层的方案","link":"#较底层的方案","children":[]},{"level":3,"title":"集成方案","slug":"集成方案","link":"#集成方案","children":[]}]},{"level":2,"title":"Monorepo的问题","slug":"monorepo的问题","link":"#monorepo的问题","children":[{"level":3,"title":"多实例问题","slug":"多实例问题","link":"#多实例问题","children":[]}]},{"level":2,"title":"使用pnpm搭建Monorepo项目","slug":"使用pnpm搭建monorepo项目","link":"#使用pnpm搭建monorepo项目","children":[{"level":3,"title":"配置pnpm-workspace.yaml","slug":"配置pnpm-workspace-yaml","link":"#配置pnpm-workspace-yaml","children":[]},{"level":3,"title":"管理依赖","slug":"管理依赖","link":"#管理依赖","children":[]},{"level":3,"title":"创建启动命令","slug":"创建启动命令","link":"#创建启动命令","children":[]},{"level":3,"title":"跨包的热更新","slug":"跨包的热更新","link":"#跨包的热更新","children":[]},{"level":3,"title":"设置workspace的包依赖","slug":"设置workspace的包依赖","link":"#设置workspace的包依赖","children":[]},{"level":3,"title":"在其他应用中导入","slug":"在其他应用中导入","link":"#在其他应用中导入","children":[]},{"level":3,"title":"编译","slug":"编译","link":"#编译","children":[]}]},{"level":2,"title":"lerna+yarn","slug":"lerna-yarn","link":"#lerna-yarn","children":[]}],"relativePath":"frontend/monorepo.md"}'),p={name:"frontend/monorepo.md"},o=l('<h1 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-hidden="true">#</a></h1><h2 id="什么是monorepo" tabindex="-1">什么是Monorepo <a class="header-anchor" href="#什么是monorepo" aria-hidden="true">#</a></h2><p>Monorepo是软件工程领域的概念，相对于传统的把各个项目独立一个仓库的MultiRepo模式，Monorepo是把多个项目放在一个仓库里管理。</p><p><img src="'+e+`" alt=""></p><h2 id="multirepo的不足" tabindex="-1">MultiRepo的不足 <a class="header-anchor" href="#multirepo的不足" aria-hidden="true">#</a></h2><h3 id="代码复用" tabindex="-1">代码复用 <a class="header-anchor" href="#代码复用" aria-hidden="true">#</a></h3><p>项目之间公共的代码逻辑经常是拷贝，当需要改动时，就需要拷贝多分</p><h3 id="依赖的版本管理" tabindex="-1">依赖的版本管理 <a class="header-anchor" href="#依赖的版本管理" aria-hidden="true">#</a></h3><p>项目之间相同的依赖，版本经常不同，可能存在某个升级，但是另一些没升级，导致出现奇怪的错误。</p><h3 id="项目基建" tabindex="-1">项目基建 <a class="header-anchor" href="#项目基建" aria-hidden="true">#</a></h3><p>需要单独配置开发环境、CI流程、配置部署发布流程等等。甚至每个项目都有自己单独的一套脚手架工具。而这些都是重复的工作。</p><h2 id="monorepo的优势" tabindex="-1">Monorepo的优势 <a class="header-anchor" href="#monorepo的优势" aria-hidden="true">#</a></h2><ul><li>工作流一致：改动发现问题更及时，不会出现不一致的情况</li><li>项目基建成本低：只要一套工具就行</li><li>团队协作也更加容易：能够更方便的共享、检索代码</li></ul><h2 id="monorepo的落地设计" tabindex="-1">Monorepo的落地设计 <a class="header-anchor" href="#monorepo的落地设计" aria-hidden="true">#</a></h2><p>多用于基础组件库或者工具库。</p><p>基于Monorepo的项目设计并不是简单地把所有的项目放在一起。还需要考虑:</p><ol><li>项目间依赖分析、依赖安装、构建流程、测试流程、CI 及发布流程等诸多工程环节</li><li>项目达到一定层次后的性能问题。比如项目构建/测试时间过长需要进行增量构建/测试、按需执行 CI等等</li></ol><h2 id="monorepo开源解决方案" tabindex="-1">Monorepo开源解决方案 <a class="header-anchor" href="#monorepo开源解决方案" aria-hidden="true">#</a></h2><h3 id="较底层的方案" tabindex="-1">较底层的方案 <a class="header-anchor" href="#较底层的方案" aria-hidden="true">#</a></h3><ul><li>yarn:workspace+lerna: 封装了 Monorepo 中的依赖安装、脚本批量执行等等基本的功能，但没有一套构建、测试、部署的工具链，整体 Monorepo 功能比较弱，但要用到业务项目当中，往往需要基于它进行顶层能力的封装，提供全面工程能力的支撑。</li><li>pnpm: 也是提供了依赖安装、脚本批量执行等基本功能。 效率要比yarn+lerna的方式更高效</li></ul><h3 id="集成方案" tabindex="-1">集成方案 <a class="header-anchor" href="#集成方案" aria-hidden="true">#</a></h3><p>提供从初始化、开发、构建、测试到部署的全流程能力，有一套比较完整的 Monorepo 基础设施，适合直接拿来进行业务项目的开发。不过由于这些顶层方案内部各种流程和工具链都已经非常完善了，如果要基于这些方案来定制，适配和维护的成本过高，基本是不可行的。</p><ul><li>nx</li><li>rushstack</li></ul><h2 id="monorepo的问题" tabindex="-1">Monorepo的问题 <a class="header-anchor" href="#monorepo的问题" aria-hidden="true">#</a></h2><h3 id="多实例问题" tabindex="-1">多实例问题 <a class="header-anchor" href="#多实例问题" aria-hidden="true">#</a></h3><h4 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h4><p>多项目之间的依赖极其复杂，在演进过程中很难保证所有的依赖都是固定在某个版本。比如一个项目依赖 webpack4 ，另一个依赖 webpack5。经常容易产生依赖版本冲突，造成多层依赖上游链路混用 “隐形依赖” 的版本问题，最终导致项目跑不起来或者运行失败。</p><ul><li>Lerna: 不严格隔离，冲突时，统一使用主应用的版本。</li><li>pnpm: 严格的依赖隔离管理。每个依赖严格的限制了自己只能使用符合自己版本的依赖。</li></ul><p>比如某个子包使用antd的4.10版本，另一个使用了4.15版本。Lerna使用提升的方式，只获取一个版本的antd。pnpm刚会从 子包/node_modules中找起。这样就会存在各个子包使用不同实例的问题。</p><h4 id="pnpm的解决方式" tabindex="-1">pnpm的解决方式 <a class="header-anchor" href="#pnpm的解决方式" aria-hidden="true">#</a></h4><h5 id="方式一-alias直接指定" tabindex="-1">方式一：alias直接指定 <a class="header-anchor" href="#方式一-alias直接指定" aria-hidden="true">#</a></h5><p>以webpack为例，给主应用的配置上加上相应的路径。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">antd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules/antd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules/react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules/react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h5 id="方式二-pnpm的hoist配置" tabindex="-1">方式二：pnpm的hoist配置 <a class="header-anchor" href="#方式二-pnpm的hoist配置" aria-hidden="true">#</a></h5><p>在配置中指定提升的方案</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"># .npmrc</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 强制提升所有 antd 到全局，保证唯一实例</span></span>
<span class="line"><span style="color:#A6ACCD;">public-hoist-pattern[]=antd</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 不配置这个选项时候的默认值，我们要手动把他加上</span></span>
<span class="line"><span style="color:#A6ACCD;">public-hoist-pattern[]=*types*</span></span>
<span class="line"><span style="color:#A6ACCD;">public-hoist-pattern[]=*eslint*</span></span>
<span class="line"><span style="color:#A6ACCD;">public-hoist-pattern[]=@prettier/plugin-*</span></span>
<span class="line"><span style="color:#A6ACCD;">public-hoist-pattern[]=*prettier-plugin-*</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="使用pnpm搭建monorepo项目" tabindex="-1">使用pnpm搭建Monorepo项目 <a class="header-anchor" href="#使用pnpm搭建monorepo项目" aria-hidden="true">#</a></h2><h3 id="配置pnpm-workspace-yaml" tabindex="-1">配置pnpm-workspace.yaml <a class="header-anchor" href="#配置pnpm-workspace-yaml" aria-hidden="true">#</a></h3><p>在项目中创建，声明这是pnpm管理的Monorepo项目。</p><p>该配置文件主要声明项目中子包的路径。</p><p>如element-plus项目的配置如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">packages:</span></span>
<span class="line"><span style="color:#A6ACCD;">  - packages/*</span></span>
<span class="line"><span style="color:#A6ACCD;">  - docs</span></span>
<span class="line"><span style="color:#A6ACCD;">  - play</span></span>
<span class="line"><span style="color:#A6ACCD;">  - internal/*</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>也可以使用!来做反向过滤</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">packages:</span></span>
<span class="line"><span style="color:#A6ACCD;">  # all packages in subdirs of packages/ and components/</span></span>
<span class="line"><span style="color:#A6ACCD;">  - &#39;packages/**&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  # exclude packages that are inside test directories</span></span>
<span class="line"><span style="color:#A6ACCD;">  - &#39;!**/test/**&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="管理依赖" tabindex="-1">管理依赖 <a class="header-anchor" href="#管理依赖" aria-hidden="true">#</a></h3><p>理论上来说，只要挑选出各个项目的共同依赖，然后提到最外层的即可。但是实际开发时，经常出现共同依赖也需要分版本的情况。比如某个项目可能依赖react16。而最新的项目，我们希望依赖于react18。像这样的公共库就不适合提到最上层。另外像lodash,typescript这样的库，基本上不会有大影响的公共库，就需要提到最上层，避免每个项目去安装一次。 使用pnpm安装后，所有不在子项目的依赖，默认会有个软链接到外层的node_modules。 可以关闭该配置，但是最好不要</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">// .npmrc中配置，即可关闭软链接的功能</span></span>
<span class="line"><span style="color:#A6ACCD;">shared-workspace-lockfile=false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="创建启动命令" tabindex="-1">创建启动命令 <a class="header-anchor" href="#创建启动命令" aria-hidden="true">#</a></h3><p>首先需要给每个子包命令，在package.json中设置name</p><p>其次启动命令，有两种方式，可以使用-C 或 --filter参数来找到相应的子应用。 &quot;scripts&quot;: { &quot;dev:app1&quot;: &quot;pnpm start --filter &quot;@mono/app1&quot;&quot;, &quot;dev:app2&quot;: &quot;pnpm start --filter &quot;@mono/app2&quot;&quot;, &quot;docs:dev&quot;: &quot;pnpm run -C docs dev&quot; },</p><p>-C: 进入到某个指定的目录，并运行命令。</p><p>--filter: 根据workspace下的包名来启动。</p><h3 id="跨包的热更新" tabindex="-1">跨包的热更新 <a class="header-anchor" href="#跨包的热更新" aria-hidden="true">#</a></h3><p>设置共享包的main路径 比如在app2中需要暴露某些公共代码给其他应用，其入口文件为common/share/index.ts。 刚main的配置如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;main&quot;: &quot;./src/common/share/index.ts&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="设置workspace的包依赖" tabindex="-1">设置workspace的包依赖 <a class="header-anchor" href="#设置workspace的包依赖" aria-hidden="true">#</a></h3><p>pnpm的workspace依赖的语法如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;dependencies&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;@mono/app2&quot;: &quot;workspace:*&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可以在要引用 app2 的包中设置，也可以在最外层的主应用中设置。</p><p>@mono/app2 为共享包的名称。</p><h3 id="在其他应用中导入" tabindex="-1">在其他应用中导入 <a class="header-anchor" href="#在其他应用中导入" aria-hidden="true">#</a></h3><p>导入方式与导入库的方式一样，名称为相应的包名称：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">import { Button } from &#39;@mono/app2&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-hidden="true">#</a></h3><h4 id="背景-1" tabindex="-1">背景 <a class="header-anchor" href="#背景-1" aria-hidden="true">#</a></h4><p>在构建时，可能会出现以下3种情况：</p><ol><li>通常项目的寻址路径只针对本项目寻找，对其他目录的文件，会出现加载不到的情况。</li><li>子包名称更换：@mono/app2 之类的包名可能也会换成某个特定的名称。如，@element-plus/components 会换成element-plus/components。</li><li>引入的文件有当前项目不支持的特性：如包中使用ts,但是引用的项目没有ts的解析配置</li></ol><h4 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-hidden="true">#</a></h4><ol><li>补全相应的文件处理配置。</li><li>首先要书写匹配相关子包文件路径的方法。</li><li>在合适的位置添加相应的文件，如：</li><li>webpack：在检测到相应的loader中，添加路径。</li><li>gulp：在寻址时，加上其他包的文件路径。</li><li>Rollup： 添加子包的入口路径。</li></ol><h2 id="lerna-yarn" tabindex="-1">lerna+yarn <a class="header-anchor" href="#lerna-yarn" aria-hidden="true">#</a></h2><p><a href="https://github.com/Quramy/lerna-yarn-workspaces-example" target="_blank" rel="noreferrer">https://github.com/Quramy/lerna-yarn-workspaces-example</a></p><ol><li>使用yarn代替lerna的包管理。</li><li>yarn add</li><li>yarn workspace</li><li>lerna.json中配置npmClient为yarn及useWorkspaces为true。该配置会在node_modules上生成一个到子包的链接，将开发中的包变成一个依赖。</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;lerna&quot;: &quot;2.2.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;packages&quot;: [</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ],</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;npmClient&quot;: &quot;yarn&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;useWorkspaces&quot;: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;version&quot;: &quot;1.0.0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="3"><li>在package.json中声明workspace</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;private&quot;: true, // 工作空间不需要发布</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;workspaces&quot;: [&quot;packages/*&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="4"><li>在tsconfig.json中添加path路径</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">/* tsconfig.json */</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    /* other options */</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;baseUrl&quot;: &quot;./packages&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;paths&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">      &quot;@quramy/*&quot;: [&quot;./*/src&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,77),r=[o];function t(c,i,d,h,u,C){return n(),a("div",null,r)}const D=s(p,[["render",t]]);export{A as __pageData,D as default};
